import gql from "graphql-tag";
import * as VueApolloComposable from "@vue/apollo-composable";
import * as VueCompositionApi from "vue";
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = {
  [K in keyof T]: T[K];
};
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]?: Maybe<T[SubKey]>;
};
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]: Maybe<T[SubKey]>;
};
export type ReactiveFunction<TParam> = () => TParam;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** An ISO 8601-encoded datetime */
  ISO8601DateTime: any;
};

/** Autogenerated input type of Login */
export type LoginInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  email: Scalars["String"];
  password: Scalars["String"];
};

/** Autogenerated return type of Login */
export type LoginPayload = {
  __typename?: "LoginPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  token: Scalars["String"];
  user: User;
};

export type Mutation = {
  __typename?: "Mutation";
  login?: Maybe<LoginPayload>;
  /** ユーザーを作成します */
  userCreate?: Maybe<UserCreatePayload>;
};

export type MutationLoginArgs = {
  input: LoginInput;
};

export type MutationUserCreateArgs = {
  input: UserCreateInput;
};

export type Query = {
  __typename?: "Query";
  /** 現在のユーザーを取得する */
  currentUser?: Maybe<User>;
};

export type User = {
  __typename?: "User";
  createdAt: Scalars["ISO8601DateTime"];
  email: Scalars["String"];
  id: Scalars["ID"];
  updatedAt: Scalars["ISO8601DateTime"];
};

/** Autogenerated input type of UserCreate */
export type UserCreateInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  userInput: UserInput;
};

/** Autogenerated return type of UserCreate */
export type UserCreatePayload = {
  __typename?: "UserCreatePayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  token: Scalars["String"];
  user: User;
};

export type UserInput = {
  email?: InputMaybe<Scalars["String"]>;
  password?: InputMaybe<Scalars["String"]>;
  passwordConfirmation?: InputMaybe<Scalars["String"]>;
};

export type UserCreateMutationVariables = Exact<{
  email: Scalars["String"];
  password: Scalars["String"];
  passwordConfirmation: Scalars["String"];
}>;

export type UserCreateMutation = {
  __typename?: "Mutation";
  userCreate?: {
    __typename?: "UserCreatePayload";
    token: string;
    user: { __typename?: "User"; id: string; email: string };
  } | null;
};

export type LoginMutationVariables = Exact<{
  email: Scalars["String"];
  password: Scalars["String"];
}>;

export type LoginMutation = {
  __typename?: "Mutation";
  login?: {
    __typename?: "LoginPayload";
    token: string;
    user: { __typename?: "User"; id: string; email: string };
  } | null;
};

export const UserCreateDocument = gql`
  mutation userCreate(
    $email: String!
    $password: String!
    $passwordConfirmation: String!
  ) {
    userCreate(
      input: {
        userInput: {
          email: $email
          password: $password
          passwordConfirmation: $passwordConfirmation
        }
      }
    ) {
      token
      user {
        id
        email
      }
    }
  }
`;

/**
 * __useUserCreateMutation__
 *
 * To run a mutation, you first call `useUserCreateMutation` within a Vue component and pass it any options that fit your needs.
 * When your component renders, `useUserCreateMutation` returns an object that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - Several other properties: https://v4.apollo.vuejs.org/api/use-mutation.html#return
 *
 * @param options that will be passed into the mutation, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/mutation.html#options;
 *
 * @example
 * const { mutate, loading, error, onDone } = useUserCreateMutation({
 *   variables: {
 *     email: // value for 'email'
 *     password: // value for 'password'
 *     passwordConfirmation: // value for 'passwordConfirmation'
 *   },
 * });
 */
export function useUserCreateMutation(
  options:
    | VueApolloComposable.UseMutationOptions<
        UserCreateMutation,
        UserCreateMutationVariables
      >
    | ReactiveFunction<
        VueApolloComposable.UseMutationOptions<
          UserCreateMutation,
          UserCreateMutationVariables
        >
      >
) {
  return VueApolloComposable.useMutation<
    UserCreateMutation,
    UserCreateMutationVariables
  >(UserCreateDocument, options);
}
export type UserCreateMutationCompositionFunctionResult =
  VueApolloComposable.UseMutationReturn<
    UserCreateMutation,
    UserCreateMutationVariables
  >;
export const LoginDocument = gql`
  mutation login($email: String!, $password: String!) {
    login(input: { email: $email, password: $password }) {
      token
      user {
        id
        email
      }
    }
  }
`;

/**
 * __useLoginMutation__
 *
 * To run a mutation, you first call `useLoginMutation` within a Vue component and pass it any options that fit your needs.
 * When your component renders, `useLoginMutation` returns an object that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - Several other properties: https://v4.apollo.vuejs.org/api/use-mutation.html#return
 *
 * @param options that will be passed into the mutation, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/mutation.html#options;
 *
 * @example
 * const { mutate, loading, error, onDone } = useLoginMutation({
 *   variables: {
 *     email: // value for 'email'
 *     password: // value for 'password'
 *   },
 * });
 */
export function useLoginMutation(
  options:
    | VueApolloComposable.UseMutationOptions<
        LoginMutation,
        LoginMutationVariables
      >
    | ReactiveFunction<
        VueApolloComposable.UseMutationOptions<
          LoginMutation,
          LoginMutationVariables
        >
      >
) {
  return VueApolloComposable.useMutation<LoginMutation, LoginMutationVariables>(
    LoginDocument,
    options
  );
}
export type LoginMutationCompositionFunctionResult =
  VueApolloComposable.UseMutationReturn<LoginMutation, LoginMutationVariables>;
